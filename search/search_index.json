{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Beremiz Documentation","text":"<p>Beremiz is a fun, experimental language based on the stack-based principles of Porth, created by Alexey Kutepov. While Beremiz is designed to be playful and educational, it's not intended for serious programming. Its performance is limited because it runs on top of Lua, making it relatively slow.</p> <p>The name Beremiz is inspired by the character Beremiz Samir, known as \"The Man Who Counted.\" He was created by J\u00falio C\u00e9sar de Mello e Souza, a Brazilian teacher and writer better known as Malba Tahan.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Prerequisites</li> <li>Installation</li> <li>Running Beremiz Code</li> <li>Example Files</li> <li>Running Tests</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure you have Lua installed on your system. You can download it from the official Lua website.</p>"},{"location":"#installation","title":"Installation","text":"<p>Clone this repository locally:</p> <pre><code>git clone https://github.com/AdaiasMagdiel/beremiz.git\ncd beremiz\n</code></pre>"},{"location":"#running-beremiz-code","title":"Running Beremiz Code","text":"<p>There are two ways to run Beremiz code:</p> <ul> <li> <p>Using the REPL:   <pre><code>lua main.lua\n</code></pre></p> </li> <li> <p>Passing a file:   <pre><code>lua main.lua [file]\n</code></pre></p> </li> </ul>"},{"location":"#example-files","title":"Example Files","text":"<p>You can find several example files in the <code>examples</code> folder to help you get started. Here are some key examples:</p> <ul> <li>Factorial: A program that calculates the factorial of a number.</li> <li>Pythagorean Theorem: Demonstrates the calculation of the hypotenuse in a right-angled triangle using the Pythagorean theorem.</li> <li>Quadratic Equation: Solves quadratic equations and finds their roots.</li> </ul>"},{"location":"#running-tests","title":"Running Tests","text":"<p>This project uses Leste, an elegant testing framework for Lua developed by me. Ensure that Leste is installed and run the tests with:</p> <pre><code>leste -vx\n</code></pre>"},{"location":"arithmetic-comparison/","title":"Arithmetic and Comparison Operations","text":""},{"location":"arithmetic-comparison/#arithmetic-operations","title":"Arithmetic Operations","text":"<ul> <li><code>+</code>: Adds the top two items on the stack.</li> <li><code>-</code>: Subtracts the top item from the second top item on the stack.</li> <li><code>*</code>: Multiplies the top two items on the stack.</li> <li><code>/</code>: Divides the second top item by the top item on the stack.</li> <li><code>%</code>: Computes the remainder of the division of the second top item by the top item on the stack.</li> <li><code>**</code>: Raises the second top item to the power of the top item on the stack.</li> </ul> <p>Examples:</p> <pre><code> 5 3  + show   # Output: 8\n10 4  - show   # Output: 6\n 2 3  * show   # Output: 6\n10 2  / show   # Output: 5.0\n10 3  % show   # Output: 1\n 2 3 ** show   # Output: 8.0  (2 raised to the power of 3)\n</code></pre>"},{"location":"arithmetic-comparison/#comparison-operations","title":"Comparison Operations","text":"<ul> <li><code>&gt;</code>: Checks if the second top item is greater than the top item on the stack.</li> <li><code>=</code>: Checks if the top two items on the stack are equal and pushes a boolean result onto the stack.</li> <li><code>!=</code>: Checks if the top two items on the stack are different and pushes a boolean result onto the stack.</li> </ul> <p>Examples:</p> <pre><code> 5  3  &gt; show   # Output: true\n 2  3  &gt; show   # Output: false\n10 10  = show   # Output: true\n10  5  = show   # Output: false\n10 10 != show   # Output: false\n10  5 != show   # Output: true\n</code></pre>"},{"location":"constants-functions/","title":"Defining Constants and Functions","text":""},{"location":"constants-functions/#defining-constants","title":"Defining Constants","text":"<p>Constants can be defined using the <code>define</code> keyword followed by the name of the constant, its value, and the <code>end</code> keyword.</p> <p>Example:</p> <pre><code>define name \"Magdiel\n\n\" end\ndefine age 22 end\n</code></pre> <p>After defining, you can use these constants in your code.</p> <p>Example:</p> <pre><code>name   # Puts \"Magdiel\" on the stack\nage    # Puts 22 on the stack\n</code></pre>"},{"location":"constants-functions/#defining-functions","title":"Defining Functions","text":"<p>Functions can be defined using the <code>define</code> keyword followed by the name of the function, the function body, and the <code>end</code> keyword.</p> <p>Example:</p> <pre><code>define dupl\n    2 *\nend\n</code></pre> <p>After defining, you can use these functions in your code.</p> <p>Example:</p> <pre><code>5 dupl   # Multiplies 5 by 2 and adds the result to the stack\n</code></pre>"},{"location":"constants-functions/#example-of-using-constants-and-functions","title":"Example of Using Constants and Functions","text":"<p>Combining constants and functions, you can create more complex expressions.</p> <p>Example:</p> <pre><code>define name \"Magdiel\" end\ndefine half_age 11 end\n\ndefine dupl\n    2 *\nend\n\nname            # Puts \"Magdiel\" on the stack\nhalf_age dupl   # Multiplies half_age by 2 and adds the result to the stack\n\n\"Hi, I'm $1 and I have $0\" show   # Output: \"Hi, I'm Magdiel and I have 22\"\n</code></pre>"},{"location":"control-structures/","title":"Control Structures","text":""},{"location":"control-structures/#while-loops","title":"While Loops","text":"<p>The <code>while</code> loop allows the execution of a set of statements repeatedly as long as a condition is true.</p> <p>Example:</p> <pre><code># Print all numbers between 0 and 10.\n\n10   # Put 10 on the stack\n\nwhile dup 0 &gt; do\n    dup show\n    1 -\nend\n</code></pre>"},{"location":"control-structures/#if-else-conditional-structures","title":"If-Else Conditional Structures","text":"<p>The <code>if-else</code> structure allows conditional execution of code blocks.</p> <p>Example:</p> <pre><code>1 1 +  # Sum 1 plus 1 and put the result on the stack\n2 =    # Verify if the result (on the stack) is equal to 2 and add to the stack\n\nif\n    \"Equal\" show\nelse\n    \"Not equal\" show\nend\n</code></pre>"},{"location":"displaying-data/","title":"Displaying Data","text":""},{"location":"displaying-data/#showing-last-stack-element","title":"Showing Last Stack Element","text":"<p>The keyword <code>show</code> is used to remove and display the last element of the stack.</p> <p>Example:</p> <pre><code>1 2 3  # Stack: [1, 2, 3]\nshow   # Output: 3 -&gt; Stack: [1, 2]\n</code></pre>"},{"location":"displaying-data/#string-interpolation","title":"String Interpolation","text":"<p>String interpolation allows you to create formatted strings by consuming elements from the stack.</p> <ul> <li>Use <code>$0</code>, <code>$1</code>, etc., within a string to refer to the elements of the stack.</li> <li><code>$0</code> refers to the top element of the stack, <code>$1</code> refers to the second element, and so on.</li> <li>String interpolations consume the referenced stack elements in the process.</li> </ul> <p>Example:</p> <pre><code>7 42                        # Stack: [7, 42]\n\"Num1: $1, Num2: $0\" show   # Output: \"Num1: 7, Num2: 42\" -&gt; Stack: []\n</code></pre> <p>If you try to consume more elements than are present in the stack, an error is raised. You can also escape the <code>$</code> using <code>\\$</code>:</p> <p>Example:</p> <pre><code>\"Magdiel\"\n\"Name: $0 | Escaping: \\$ \\$1\" show   # Output: \"Name: Magdiel | Escaping: $ $1\"\n</code></pre>"},{"location":"documentation/","title":"Documentation","text":""},{"location":"documentation/#comments","title":"Comments","text":""},{"location":"documentation/#single-line-comments","title":"Single Line Comments","text":"<p>Single line comments can be inserted using the <code>#</code> character. They will be ignored by the interpreter.</p> <p>Example:</p> <pre><code># This is a single line comment\n</code></pre>"},{"location":"documentation/#multi-line-comments","title":"Multi-line Comments","text":"<p>Multi-line comments can be inserted between <code>#[</code> and <code>]#</code>.</p> <p>Example:</p> <pre><code>#[\nThis is a multi-line comment.\nIt can span multiple lines.\n]#\n</code></pre>"},{"location":"stack-operations/","title":"Stack Operations","text":""},{"location":"stack-operations/#basic-operations","title":"Basic Operations","text":"<ul> <li><code>over</code>: Duplicates the second item from the top of the stack.</li> </ul> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nover  # Stack: [1, 2, 1]\n</code></pre> <ul> <li><code>dup</code>: Duplicates the top item of the stack.</li> </ul> <p>Example:</p> <pre><code>3 4   # Stack: [3, 4]\ndup   # Stack: [3, 4, 4]\n</code></pre> <ul> <li><code>drop</code>: Removes the top item from the stack.</li> </ul> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\ndrop  # Stack: [1]\n</code></pre> <ul> <li><code>swap</code>: Swaps the top two items on the stack.</li> </ul> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nswap  # Stack: [2, 1]\n</code></pre> <ul> <li><code>nil</code>: Inserts a null value into the stack.</li> </ul> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nnil   # Stack: [1, 2, nil]\n</code></pre> <ul> <li><code>dumpstack</code>: Dumps the current stack trace for debugging purposes. This operation doesn't consume the stack.</li> </ul> <p>Example:</p> <pre><code>1 2\ndumpstack   # Output: [STACK]: [1, 2]\nswap\ndumpstack   # Output: [STACK]: [2, 1]\n</code></pre>"},{"location":"modules/math-module/","title":"Math Module","text":"<p>The <code>math</code> module provides methods for math manipulation.</p>"},{"location":"modules/math-module/#available-methods","title":"Available Methods:","text":""},{"location":"modules/math-module/#toint","title":"<code>toint</code>","text":"<p>Converts a valid string value into a number.</p> <p>Usage:</p> <pre><code>\"value\" math.toint\n</code></pre> <p>Example:</p> <pre><code>\"10\" math.toint\n5 + show          # Output: 15\n</code></pre>"},{"location":"modules/string-module/","title":"String Module","text":"<p>The <code>string</code> module provides methods for string manipulation.</p>"},{"location":"modules/string-module/#available-methods","title":"Available Methods:","text":""},{"location":"modules/string-module/#upper","title":"<code>upper</code>","text":"<p>Converts the string on top of the stack to uppercase.</p> <p>Usage:</p> <pre><code>\"string\" string.upper\n</code></pre> <p>Example:</p> <pre><code>\"hello\" string.upper show   # Output: HELLO\n</code></pre>"},{"location":"modules/string-module/#lower","title":"<code>lower</code>","text":"<p>Converts the string on top of the stack to lowercase.</p> <p>Usage:</p> <pre><code>\"string\" string.lower\n</code></pre> <p>Example:</p> <pre><code>\"WORLD\" string.lower show   # Output: world\n</code></pre>"},{"location":"modules/string-module/#split","title":"<code>split</code>","text":"<p>Splits the string on top of the stack by the specified separator and pushes the resulting substrings onto the stack in reverse order. This ensures the first part of the string is on the top of the stack. To split a string into individual characters, you can use an empty string as a separator.</p> <p>Usage:</p> <pre><code>\"string\" \"separator\" string.split\n</code></pre> <p>Example:</p> <pre><code>\"hello world example\" \" \" string.split\n# Stack after execution: [\"example\", \"world\", \"hello\"]\n</code></pre> <p>Another example:</p> <pre><code>\"one,two,three\" \",\" string.split\n# Stack after execution: [\"three\", \"two\", \"one\"]\n\nshow   # Output: one\nshow   # Output: two\nshow   # Output: three\n</code></pre>"}]}