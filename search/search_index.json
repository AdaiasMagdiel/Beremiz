{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Beremiz Documentation","text":"<p>Beremiz is a fun, experimental language based on the stack-based principles of Porth, created by Alexey Kutepov. While Beremiz is designed to be playful and educational, it's not intended for serious programming. Its performance is limited because it runs on top of Lua, making it relatively slow.</p> <p>The name Beremiz is inspired by the character Beremiz Samir, known as \"The Man Who Counted.\" He was created by J\u00falio C\u00e9sar de Mello e Souza, a Brazilian teacher and writer better known as Malba Tahan.</p> <p>A simple \"Hello, World!\" in Beremiz:</p> <pre><code>\"Hello, World!\" show\n</code></pre>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Prerequisites</li> <li>Installation</li> <li>Running Beremiz Code</li> <li>Example Files</li> <li>Running Tests</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure you have Lua installed on your system. You can download it from the official Lua website.</p>"},{"location":"#installation","title":"Installation","text":"<p>Clone this repository locally:</p> <pre><code>git clone https://github.com/AdaiasMagdiel/beremiz.git\ncd beremiz\n</code></pre>"},{"location":"#running-beremiz-code","title":"Running Beremiz Code","text":"<p>There are two ways to run Beremiz code:</p> <ul> <li> <p>Using the REPL:   <pre><code>lua main.lua\n</code></pre></p> </li> <li> <p>Passing a file:   <pre><code>lua main.lua [file]\n</code></pre></p> </li> </ul>"},{"location":"#example-files","title":"Example Files","text":"<p>You can find several example files in the <code>examples</code> folder to help you get started. Here are some key examples:</p> <ul> <li>Factorial: A program that calculates the factorial of a number.</li> <li>Pythagorean Theorem: Demonstrates the calculation of the hypotenuse in a right-angled triangle using the Pythagorean theorem.</li> <li>Quadratic Equation: Solves quadratic equations and finds their roots.</li> </ul>"},{"location":"#running-tests","title":"Running Tests","text":"<p>This project uses Leste, an elegant testing framework for Lua developed by me. Ensure that Leste is installed and run the tests with:</p> <pre><code>leste -vx\n</code></pre>"},{"location":"arithmetic-comparison/","title":"Arithmetic and Comparison Operations","text":"<p>This section covers a variety of arithmetic and comparison operations that are intrinsic to the language for stack manipulation.</p>"},{"location":"arithmetic-comparison/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>The available arithmetic operators are as follows:</p> <ul> <li><code>+</code>: Adds the top two items on the stack.</li> <li><code>-</code>: Subtracts the top item from the second top item on the stack.</li> <li><code>*</code>: Multiplies the top two items on the stack.</li> <li><code>/</code>: Divides the second top item by the top item on the stack.</li> <li><code>%</code>: Computes the remainder of the division of the second top item by the top item on the stack.</li> <li><code>**</code>: Raises the second top item to the power of the top item on the stack.</li> </ul>"},{"location":"arithmetic-comparison/#examples","title":"Examples:","text":"<pre><code> 5 3  + show   # Result: 8\n10 4  - show   # Result: 6\n 2 3  * show   # Result: 6\n10 2  / show   # Result: 5.0\n10 3  % show   # Result: 1\n 2 3 ** show   # Result: 8.0  (2 raised to the power of 3)\n</code></pre>"},{"location":"arithmetic-comparison/#comparison-operations","title":"Comparison Operations","text":"<p>The available comparison operators are as follows:</p> <ul> <li><code>&gt;</code>: Checks if the second top item is greater than the top item on the stack.</li> <li><code>=</code>: Checks if the top two items on the stack are equal and pushes a boolean result onto the stack.</li> <li><code>!=</code>: Checks if the top two items on the stack are different and pushes a boolean result onto the stack.</li> </ul>"},{"location":"arithmetic-comparison/#examples_1","title":"Examples:","text":"<pre><code> 5  3  &gt; show   # Result: true\n 2  3  &gt; show   # Result: false\n10 10  = show   # Result: true\n10  5  = show   # Result: false\n10 10 != show   # Result: false\n10  5 != show   # Result: true\n</code></pre>"},{"location":"comments/","title":"Comments","text":"<p>Comments in Beremiz serve to annotate code and provide additional information without affecting the program's execution.</p>"},{"location":"comments/#single-line-comments","title":"Single Line Comments","text":"<p>Single line comments can be inserted using the <code>#</code> character. They will be ignored by the interpreter.</p> <p>Example:</p> <pre><code># This is a single line comment\n</code></pre>"},{"location":"comments/#multi-line-comments","title":"Multi-line Comments","text":"<p>Multi-line comments can be inserted between <code>#[</code> and <code>]#</code>.</p> <p>Example:</p> <pre><code>#[\nThis is a multi-line comment.\nIt can span multiple lines.\n]#\n</code></pre>"},{"location":"constants-functions/","title":"Defining Constants and Functions","text":"<p>In Beremiz, you can define constants and functions to enhance code readability and maintainability.</p>"},{"location":"constants-functions/#defining-constants","title":"Defining Constants","text":"<p>Constants are defined using the <code>define</code> keyword followed by the constant's name, its value, and the <code>end</code> keyword.</p> <p>Example:</p> <pre><code>define name \"Magdiel\" end\ndefine age 22 end\n</code></pre> <p>Once defined, these constants can be used throughout your code.</p> <p>Example:</p> <pre><code>name   # Pushes \"Magdiel\" onto the stack\nage    # Pushes 22 onto the stack\n</code></pre>"},{"location":"constants-functions/#defining-functions","title":"Defining Functions","text":"<p>Functions can be defined using the <code>define</code> keyword followed by the function's name, its body, and the <code>end</code> keyword.</p> <p>Example:</p> <pre><code>define dupl\n    2 *\nend\n</code></pre> <p>After defining a function, you can utilize it within your code.</p> <p>Example:</p> <pre><code>5 dupl   # Multiplies 5 by 2 and adds the result to the stack\n</code></pre>"},{"location":"constants-functions/#example-of-using-constants-and-functions","title":"Example of Using Constants and Functions","text":"<p>By combining constants and functions, you can create more complex expressions.</p> <p>Example:</p> <pre><code>define name \"Magdiel\" end\ndefine half_age 11 end\n\ndefine dupl\n    2 *\nend\n\nname            # Pushes \"Magdiel\" onto the stack\nhalf_age dupl   # Multiplies half_age by 2 and adds the result to the stack\n\n\"Hi, I'm $1 and I have $0\" show   # Output: \"Hi, I'm Magdiel and I have 22\"\n</code></pre>"},{"location":"control-structures/","title":"Control Structures","text":"<p>In Beremiz, control structures such as while loops and if-else conditional structures enable you to manage the flow of execution within your code.</p>"},{"location":"control-structures/#while-loops","title":"While Loops","text":"<p>The <code>while</code> loop executes a set of statements repeatedly as long as a condition is true or not nil.</p> <p>Example:</p> <pre><code># Print all numbers between 0 and 10.\n\n10   # Push 10 onto the stack\n\nwhile dup 0 &gt; do\n    dup show\n    1 -\nend\n</code></pre>"},{"location":"control-structures/#break-statement","title":"Break Statement","text":"<p>The <code>break</code> keyword is used to immediately exit a <code>while</code> loop, regardless of the loop's condition.</p> <p>Example:</p> <pre><code># Print numbers from 10 to 6, then exit the loop\n\n10   # Push 10 onto the stack\n\nwhile dup 0 &gt; do\n    if dup 5 = do\n        break       # Exit the loop if the number is 5\n    end\n\n    dup show\n\n    1 -\nend\n</code></pre>"},{"location":"control-structures/#continue-statement","title":"Continue Statement","text":"<p>The <code>continue</code> keyword is used to skip the current iteration of a <code>while</code> loop and proceed to the next iteration.</p> <p>Example:</p> <pre><code># Print numbers from 10 to 1, but skip 5\n\n10   # Push 10 onto the stack\n\nwhile dup 0 &gt; do\n    if dup 5 = do\n        1 -        # Decrement to avoid an infinite loop\n        continue   # Skip the rest of the loop when the number is 5\n    end\n\n    dup show\n\n    1 -\nend\n</code></pre>"},{"location":"control-structures/#if-else-conditional-structures","title":"If-Else Conditional Structures","text":"<p>The <code>if-else</code> structure allows conditional execution of code blocks based on specified conditions.</p> <p>Example:</p> <pre><code>1 1 +        # Add 1 to 1 and push the result onto the stack\n\nif 2 = do    # Check if the result (on the stack) is equal to 2\n    \"Equal\" show\nelse\n    \"Not equal\" show\nend\n</code></pre>"},{"location":"displaying-data/","title":"Displaying Data","text":"<p>In Beremiz, you can display data in various formats using the <code>show</code> keyword and string interpolation.</p>"},{"location":"displaying-data/#showing-last-stack-element","title":"Showing Last Stack Element","text":"<p>The keyword <code>show</code> removes and displays the last element of the stack.</p> <p>Example:</p> <pre><code>1 2 3  # Stack: [1, 2, 3]\nshow   # Output: 3 -&gt; Stack: [1, 2]\n</code></pre>"},{"location":"displaying-data/#string-interpolation","title":"String Interpolation","text":"<p>String interpolation allows you to create formatted strings by consuming elements from the stack.</p> <ul> <li>Use <code>$0</code>, <code>$1</code>, etc., within a string to refer to the elements of the stack.</li> <li><code>$0</code> refers to the top element of the stack, <code>$1</code> refers to the second element, and so on.</li> <li>String interpolations consume the referenced stack elements in the process.</li> </ul> <p>Example:</p> <pre><code>7 42                        # Stack: [7, 42]\n\"Num1: $1, Num2: $0\" show   # Output: \"Num1: 7, Num2: 42\" -&gt; Stack: []\n</code></pre> <p>If you try to consume more elements than are present in the stack, an error is raised. You can also escape the <code>$n</code> using <code>\\$n</code>.</p> <p>Example:</p> <pre><code>\"Magdiel\"\n\"Name: $0 | Escaping: \\$1\" show   # Output: \"Name: Magdiel | Escaping: $1\"\n</code></pre>"},{"location":"including/","title":"Including Files","text":"<p>In Beremiz, the <code>include</code> keyword allows you to import code from other files. This feature is particularly useful for organizing and reusing code across multiple files, promoting modularity and maintainability.</p>"},{"location":"including/#usage","title":"Usage","text":"<p>You can include files using the <code>include</code> keyword followed by the path to the file you want to include.</p> <p>Example:</p> <pre><code>include \"path/to/file.brz\"\n</code></pre> <p>Beremiz first searches for the specified file in the directory where the code is being executed. If the file is not found there, it then looks in the language's <code>includes</code> directory, where standard files like <code>std.brz</code> are located.</p>"},{"location":"stack-operations/","title":"Stack Operations","text":"<p>Beremiz provides various operations for manipulating the stack, allowing you to efficiently manage data during program execution.</p>"},{"location":"stack-operations/#basic-operations","title":"Basic Operations","text":"<ul> <li> <p><code>over</code>: Duplicates the second item from the top of the stack.</p> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nover  # Stack: [1, 2, 1]\n</code></pre> </li> <li> <p><code>dup</code>: Duplicates the top item of the stack.</p> <p>Example:</p> <pre><code>3 4   # Stack: [3, 4]\ndup   # Stack: [3, 4, 4]\n</code></pre> </li> <li> <p><code>drop</code>: Removes the top item from the stack.</p> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\ndrop  # Stack: [1]\n</code></pre> </li> <li> <p><code>swap</code>: Swaps the top two items on the stack.</p> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nswap  # Stack: [2, 1]\n</code></pre> </li> <li> <p><code>nil</code>: Inserts a null value into the stack.</p> <p>Example:</p> <pre><code>1 2   # Stack: [1, 2]\nnil   # Stack: [1, 2, nil]\n</code></pre> </li> <li> <p><code>dumpstack</code>: Dumps the current stack trace for debugging purposes. This operation doesn't consume the stack.</p> <p>Example:</p> <pre><code>1 2\ndumpstack   # Output: [STACK]:\n            #             NUMBER: 1 (number)\n            #             NUMBER: 2 (number)\nswap\n\ndumpstack   # Output: [STACK]:\n            #             NUMBER: 2 (number)\n            #             NUMBER: 1 (number)\n</code></pre> </li> </ul>"},{"location":"modules/math-module/","title":"Math Module","text":"<p>The <code>math</code> module provides methods for math manipulation.</p>"},{"location":"modules/math-module/#available-methods","title":"Available Methods:","text":"<ul> <li><code>toint</code></li> </ul>"},{"location":"modules/math-module/#toint","title":"<code>toint</code>","text":"<p>Converts a valid string value into a number.</p> <p>Usage:</p> <pre><code>\"value\" math.toint\n</code></pre> <p>Example:</p> <pre><code>\"10\" math.toint\n5 + show          # Output: 15\n</code></pre>"},{"location":"modules/string-module/","title":"String Module","text":"<p>The <code>string</code> module provides methods for string manipulation.</p>"},{"location":"modules/string-module/#available-methods","title":"Available Methods:","text":"<ul> <li><code>upper</code></li> <li><code>lower</code></li> <li><code>split</code></li> </ul>"},{"location":"modules/string-module/#upper","title":"<code>upper</code>","text":"<p>Converts the string on top of the stack to uppercase.</p> <p>Usage:</p> <pre><code>\"string\" string.upper\n</code></pre> <p>Example:</p> <pre><code>\"hello\" string.upper show   # Output: HELLO\n</code></pre>"},{"location":"modules/string-module/#lower","title":"<code>lower</code>","text":"<p>Converts the string on top of the stack to lowercase.</p> <p>Usage:</p> <pre><code>\"string\" string.lower\n</code></pre> <p>Example:</p> <pre><code>\"WORLD\" string.lower show   # Output: world\n</code></pre>"},{"location":"modules/string-module/#split","title":"<code>split</code>","text":"<p>Splits the string on top of the stack by the specified separator and pushes the resulting substrings onto the stack in reverse order. This ensures the first part of the string is on the top of the stack. To split a string into individual characters, you can use an empty string as a separator.</p> <p>Usage:</p> <pre><code>\"string\" \"separator\" string.split\n</code></pre> <p>Example:</p> <pre><code>\"hello world example\" \" \" string.split\n# Stack after execution: [\"example\", \"world\", \"hello\"]\n</code></pre> <p>Another example:</p> <pre><code>\"one,two,three\" \",\" string.split\n# Stack after execution: [\"three\", \"two\", \"one\"]\n\nshow   # Output: one\nshow   # Output: two\nshow   # Output: three\n</code></pre>"}]}